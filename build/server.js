// Generated by CoffeeScript 1.10.0
var americano, application, autostart, controller, init, log;

americano = require('americano');

init = require('./server/initialize');

autostart = require('./server/lib/autostart');

controller = require('./server/lib/controller');

log = require('printit')();

application = module.exports = function(callback) {
  var currentUser, displayError, err, exitProcess, options, ref, stopProcess;
  if ((typeof process !== "undefined" && process !== null) && process.getuid() !== 0) {
    if (((ref = process.env) != null ? ref.USER : void 0) != null) {
      currentUser = ", current user is " + process.env.USER;
    } else {
      currentUser = "";
    }
    err = "cozy-controller should be run as root" + currentUser;
    log.error(err);
    if (callback != null) {
      return callback(err);
    }
  } else {
    options = {
      name: 'controller',
      port: process.env.PORT || 9002,
      host: process.env.HOST || "127.0.0.1",
      root: __dirname
    };
    if (process.env.NODE_ENV == null) {
      process.env.NODE_ENV = "development";
    }
    init.init((function(_this) {
      return function(err) {
        if (err != null) {
          log.error("Error during configuration initialization : ");
          log.raw(err);
          if (callback != null) {
            callback(err);
          }
        }
        return autostart.start(function(err) {
          if (err == null) {
            log.info("### Start Cozy Controller ###");
            return americano.start(options, function(app, server) {
              server.timeout = 10 * 60 * 1000;
              server.once('close', function(code) {
                log.info("Server close with code " + code + ".");
                return controller.stopAll((function(_this) {
                  return function() {
                    process.removeListener('uncaughtException', displayError);
                    process.removeListener('exit', exitProcess);
                    process.removeListener('SIGTERM', stopProcess);
                    return log.info("All applications are stopped");
                  };
                })(this));
              });
              if (callback != null) {
                return callback(app, server);
              }
            });
          } else {
            log.error("Error during autostart : ");
            log.raw(err);
            if (callback != null) {
              return callback(err);
            }
          }
        });
      };
    })(this));
    displayError = function(err) {
      log.warn("WARNING : ");
      log.raw(err);
      return log.raw(err.stack);
    };
    exitProcess = function(code) {
      log.info("Process exit with code " + code);
      return controller.stopAll(function() {
        process.removeListener('uncaughtException', displayError);
        process.removeListener('SIGTERM', stopProcess);
        return process.exit(code);
      });
    };
    stopProcess = function() {
      log.info("Process is stopped");
      return controller.stopAll(function() {
        return process.exit();
      });
    };
    process.on('uncaughtException', displayError);
    process.once('exit', exitProcess);
    return process.once('SIGTERM', stopProcess);
  }
};

if (!module.parent) {
  application();
}
